version: "3.4"
services:
  postgres:
    image: thingylabs/postgres:pgpool-10-alpine
    networks:
      postgres:
    environment:
      PCP_USER: pcp
      PCP_PASSWORD_FILE: /run/secrets/postgres.user.pcp
      WAIT_BACKEND_TIMEOUT: 60
      CHECK_USER: replication
      CHECK_PASSWORD_FILE: /run/secrets/postgres.user.replication
      CHECK_PGCONNECT_TIMEOUT: 3 #timout for checking if primary node is healthy
      # DB_USERS: root:/run/secrets/postgres.user.root,api-:/run/secrets/postgres.user.root
      BACKENDS: "0:postgres-master:5432:1:/var/lib/postgresql/data:ALLOW_TO_FAILOVER,1:postgres-worker::::"
      REQUIRE_MIN_BACKENDS: 1 # minimal number of backends to start pgpool (some might be unreachable)
      CONFIGS: "num_init_children:250,max_pool:4"
                # in format variable1:value1[,variable2:value2[,...]]
                # used for pgpool.conf file
    secrets:
      - source: postgres.user.pcp
        uid: '999'
        mode: 0400
      - source: postgres.user.replication
        uid: '999'
        mode: 0400
      - source: postgres.user.user
        uid: '999'
        mode: 0400

  postgres-master:
    image: thingylabs/postgres:pgsql-10
    hostname: "{{.Service.Name}}-{{.Node.ID}}"
    networks:
        postgres:
    environment:
      PARTNER_NODES: "postgres-master,postgres-worker"
      NODE_ID: 1
      NODE_NAME: postgres-master-{{.Node.ID}}
      CLUSTER_NODE_NETWORK_NAME: postgres-master # (default: hostname of the node)
      NODE_PRIORITY: 100  # (default: 100)
      #database we want to use for application
      POSTGRES_USER: root
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres.user.root
      POSTGRES_DB: postgres
      CLEAN_OVER_REWIND: 0
      CONFIGS: "listen_addresses:'*',max_replication_slots:5"
      # REPLICATION_DB: replication_db
      REPLICATION_USER: replication
      REPLICATION_PASSWORD_FILE: /run/secrets/postgres.user.replication
      POSTGRES_INITDB_FILE: /run/secrets/postgres.initdb.sh
    volumes:
      - type: volume
        source: postgres-master
        target: /var/lib/postgresql/data
    secrets:
      - source: postgres.user.root
        uid: '999'
        mode: 0400
      - source: postgres.user.replication
        uid: '999'
        mode: 0444
      - source: postgres.user.user
        uid: '999'
        mode: 0400
      - source: postgres.initdb.sh
        uid: '999'
        mode: 0644

  postgres-worker:
    image: thingylabs/postgres:pgsql-10
    hostname: "{{.Service.Name}}-{{.Node.ID}}"
    networks:
        postgres:
    environment:
        # REPLICATION_DB: replication_db
        REPLICATION_USER: replication
        REPLICATION_PASSWORD_FILE: /run/secrets/postgres.user.replication
        REPLICATION_PRIMARY_HOST: postgres-master
        PARTNER_NODES: "postgres-master,postgres-worker"
        NODE_ID: 2
        NODE_NAME: postgres-worker-{{.Node.ID}}
        CLUSTER_NODE_NETWORK_NAME: postgres-worker # (default: hostname of the node)
        CLEAN_OVER_REWIND: 1
        CONFIGS: "max_replication_slots:10" #some overrides
    volumes:
      - type: volume
        source: postgres-worker
        target: /var/lib/postgresql/data
    secrets:
      - source: postgres.user.replication
        uid: '999'
        mode: 0444

volumes:
  postgres-master:
    driver: ${DOCKER_VOLUME_DRIVER:-local}
  postgres-worker:
    driver: ${DOCKER_VOLUME_DRIVER:-local}

secrets:
  postgres.user.root:
    external:
      name: postgres.user.root
  postgres.user.pcp:
    external:
      name: postgres.user.pcp
  postgres.user.replication:
    external:
      name: postgres.user.replication
  postgres.user.user:
    external:
      name: postgres.user.user
  postgres.initdb.sh:
    external:
      name: postgres.initdb.sh

networks:
  postgres:
    driver: ${DOCKER_NETWORK_DRIVER:-overlay}
    internal: true
  postgres-master:
    driver: ${DOCKER_NETWORK_DRIVER:-overlay}
    internal: true
  postgres-worker:
    driver: ${DOCKER_NETWORK_DRIVER:-overlay}
    internal: true